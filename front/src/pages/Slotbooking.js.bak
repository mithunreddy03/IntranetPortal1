import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { FaArrowLeft, FaCalendarAlt, FaClock, FaUser, FaCheck } from "react-icons/fa";
import "./Slotbooking.css";

const SlotBooking = () => {
  const [availableSlots, setAvailableSlots] = useState([]);
  const [bookedSlots, setBookedSlots] = useState([]);
  const [teachers, setTeachers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [filters, setFilters] = useState({
    teacherId: "",
    date: "",
  });
  const [showBookingForm, setShowBookingForm] = useState(false);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [purpose, setPurpose] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  const navigate = useNavigate();
  const userRole = localStorage.getItem("role");

  useEffect(() => {
    // Get all teachers for the filter dropdown
    const fetchTeachers = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/users", {
          params: { role: "teacher" },
          headers: { Authorization: localStorage.getItem("token") }
        });
        setTeachers(response.data);
      } catch (err) {
        console.error("Error fetching teachers:", err);
      }
    };

    // Fetch slots based on role
    const fetchSlots = async () => {
      setLoading(true);
      try {
        if (userRole === "student") {
          // For students, fetch both available slots and their booked slots
          const [availableRes, bookedRes] = await Promise.all([
            axios.get("http://localhost:5000/api/slots", {
              params: { ...filters, isBooked: false },
              headers: { Authorization: localStorage.getItem("token") }
            }),
            axios.get("http://localhost:5000/api/slots/student", {
              headers: { Authorization: localStorage.getItem("token") }
            })
          ]);
          
          setAvailableSlots(availableRes.data);
          setBookedSlots(bookedRes.data);
        } else if (userRole === "teacher") {
          navigate("/teacher-slot-management");
        }
      } catch (err) {
        console.error("Error fetching slots:", err);
        setError(err.response?.data?.message || "Error fetching slots");
      } finally {
        setLoading(false);
      }
    };

    fetchTeachers();
    fetchSlots();
  }, [filters, userRole, navigate]);

  const handleBackNavigation = () => {
    if (userRole) {
      navigate(`/${userRole}-dashboard`);
    } else {
      navigate("/login");
    }
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters({
      ...filters,
      [name]: value,
    });
  };

  const handleBookSlotClick = (slot) => {
    setSelectedSlot(slot);
    setShowBookingForm(true);
    setPurpose("");
  };

  const handleBookingSubmit = async (e) => {
    e.preventDefault();
    
    if (!purpose.trim()) {
      setError("Please provide a purpose for the booking");
      return;
    }
    
    setLoading(true);
    try {
      const response = await axios.put(
        `http://localhost:5000/api/slots/${selectedSlot._id}/book`,
        { purpose },
        { headers: { Authorization: localStorage.getItem("token") } }
      );
      
      setSuccessMessage("Slot booked successfully!");
      setShowBookingForm(false);
      
      // Update the lists
      setAvailableSlots(availableSlots.filter(slot => slot._id !== selectedSlot._id));
      setBookedSlots([...bookedSlots, response.data.slot]);
      
      // Clear success message after 3 seconds
      setTimeout(() => {
        setSuccessMessage("");
      }, 3000);
    } catch (err) {
      setError(err.response?.data?.message || "Error booking slot");
    } finally {
      setLoading(false);
    }
  };

  const handleCancelBooking = async (slotId) => {
    if (!window.confirm("Are you sure you want to cancel this booking?")) {
      return;
    }
    
    setLoading(true);
    try {
      await axios.put(
        `http://localhost:5000/api/slots/${slotId}/cancel`,
        {},
        { headers: { Authorization: localStorage.getItem("token") } }
      );
      
      // Re-fetch slots to update both lists
      const [availableRes, bookedRes] = await Promise.all([
        axios.get("http://localhost:5000/api/slots", {
          params: { ...filters, isBooked: false },
          headers: { Authorization: localStorage.getItem("token") }
        }),
        axios.get("http://localhost:5000/api/slots/student", {
          headers: { Authorization: localStorage.getItem("token") }
        })
      ]);
      
      setAvailableSlots(availableRes.data);
      setBookedSlots(bookedRes.data);
      
      setSuccessMessage("Booking cancelled successfully");
      
      // Clear success message after 3 seconds
      setTimeout(() => {
        setSuccessMessage("");
      }, 3000);
    } catch (err) {
      setError(err.response?.data?.message || "Error cancelling booking");
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  // Format date for display
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', { 
      weekday: 'short',
      year: 'numeric', 
      month: 'short', 
      day: 'numeric' 
    });
  };

  const filteredTeachers = searchTerm
    ? teachers.filter(teacher => 
        teacher.name.toLowerCase().includes(searchTerm.toLowerCase()))
    : teachers;
};

export default SlotBooking;
